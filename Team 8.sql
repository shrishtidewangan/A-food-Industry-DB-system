-- DROP COMMANDS TO DROP ALL THE TABLES CREATED
DROP TABLE REVIEWS;
DROP TABLE ORDERS;
DROP TABLE CUSTOMERS;
DROP TABLE RESTAURANTINVENTORY;
DROP TABLE MENUITEMS;
DROP TABLE WAITERS;
DROP TABLE RESTAURANTS;
DROP TABLE CUISINE;

-- DROP COMMANDS TO DROP ALL THE PROCEDURES CREATED
DROP PROCEDURE ADD_CUISINE;
DROP PROCEDURE ADD_NEW_RESTAURANT;
DROP PROCEDURE ADD_WAITER;
DROP PROCEDURE CREATE_MENU_ITEM;
DROP PROCEDURE ADD_ITEM_INVENTORY;
DROP PROCEDURE INSERT_CUSTOMERS_DATA;
DROP PROCEDURE ADD_ORDER;
DROP PROCEDURE ADD_REVIEW;

-- DROP COMMANDS TO DROP ALL THE FUNCTIONS CREATED
DROP FUNCTION FIND_CUISINE_TYPE_ID;
DROP FUNCTION FIND_RESTAURANT_ID;
DROP FUNCTION FIND_MENU_ITEM_ID;
DROP FUNCTION FIND_CUSTOMER_ID;
DROP FUNCTION FIND_WAITER_ID;


-- DROP COMMANDS TO DROP ALL THE SEQUENCE CREATED
DROP SEQUENCE CUISINE_ID_SEQ;
DROP SEQUENCE RESTAURANT_ID_SEQ;
DROP SEQUENCE WAITER_ID_SEQ;
DROP SEQUENCE SEQ_MENUID;
DROP SEQUENCE CUSTOMERS_SEQ;
DROP SEQUENCE ORDERS_SEQ;
DROP SEQUENCE SEQ_RESTAURANTIVENTID;
DROP SEQUENCE REVIEW_ID_SEQ;

SET SERVEROUTPUT ON;

-- CREATE SEQUENCE COMMAND FOR CUISINE ID
CREATE SEQUENCE CUISINE_ID_SEQ
START WITH 100
INCREMENT BY 1;

-- CREATE SEQUENCE COMMAND FOR RESTAURANT ID
CREATE SEQUENCE RESTAURANT_ID_SEQ
START WITH 200
INCREMENT BY 1;

-- CREATE SEQUENCE COMMAND FOR WAITER ID
CREATE SEQUENCE WAITER_ID_SEQ 
START WITH 300
INCREMENT BY 1;

-- CREATE SEQUENCE COMMAND FOR MENU ITEM ID
CREATE SEQUENCE  SEQ_MENUID
START WITH 400 
INCREMENT BY 1;

-- CREATE SEQUENCE COMMAND FOR RESTAURANT INVENTORY ID
CREATE SEQUENCE SEQ_RESTAURANTIVENTID
START WITH 500
INCREMENT BY 1;

-- CREATE SEQUENCE COMMAND FOR CUSTOMERS ID
CREATE SEQUENCE CUSTOMERS_SEQ
START WITH 600
INCREMENT BY 1;

-- CREATE SEQUENCE COMMAND FOR ORDERS ID
CREATE SEQUENCE ORDERS_SEQ
START WITH 700
INCREMENT BY 1;

--CREATE SEQUENCE COMMAND FOR REVIEW ID
CREATE SEQUENCE REVIEW_SEQ
START WITH 800
INCREMENT BY 1;


-- CREATE TABLE COMMAND TO CREATE CUISINE TABLE
CREATE TABLE CUISINE (
    CUISINE_ID NUMBER,
    CUISINE_NAME VARCHAR(50) NOT NULL,
    CONSTRAINT CUISINE_PK PRIMARY KEY (CUISINE_ID)
);
/

-- CREATE TABLE COMMAND TO CREATE RESTAURANTS TABLE
CREATE TABLE RESTAURANTS (
    RESTAURANT_ID NUMBER,
    RESTAURANT_NAME VARCHAR(90) NOT NULL,
    RESTAURANT_STREET_ADDRESS VARCHAR(90) NOT NULL,
    CITY VARCHAR(60) NOT NULL,
    RESTAURANT_STATE VARCHAR(2) NOT NULL,
    ZIP VARCHAR(5) NOT NULL,
    CUISINE_ID NUMBER,
    CONSTRAINT RESTAURANTS_PK PRIMARY KEY (RESTAURANT_ID),
    CONSTRAINT RESTAURANTS_FK_CUISINE FOREIGN KEY (CUISINE_ID)
        REFERENCES CUISINE (CUISINE_ID)
);
/

-- CREATE TABLE COMMAND TO CREATE WAITERS TABLE
CREATE TABLE WAITERS (
    WAITER_ID NUMBER PRIMARY KEY,
    NAME VARCHAR(100),
    RESTAURANT_ID NUMBER,
    FOREIGN KEY (RESTAURANT_ID) REFERENCES RESTAURANTS(RESTAURANT_ID)
);
/

-- CREATE TABLE COMMAND TO CREATE MENU ITEMS TABLE
CREATE TABLE MENUITEMS (
    MENU_ITEM_ID NUMBER PRIMARY KEY,
    CUISINE_ID NUMBER,
    NAME VARCHAR(100),
    PRICE NUMBER,
    CONSTRAINT FK_CUISINE FOREIGN KEY (CUISINE_ID) REFERENCES CUISINE (CUISINE_ID)
);
/

-- CREATE TABLE COMMAND TO CREATE RESTAURANT INVENTORY TABLE
CREATE TABLE RESTAURANTINVENTORY (
    INVENTORY_ID INT PRIMARY KEY,
    MENU_ITEM_ID NUMBER,
    MENU_ITEM_NAME VARCHAR(100),
    RESTAURANT_ID NUMBER,
    QUANTITY NUMBER, 
    CONSTRAINT FK_MENU_ITEM_INVENTORY FOREIGN KEY (MENU_ITEM_ID) REFERENCES MENUITEMS(MENU_ITEM_ID),
    CONSTRAINT FK_RESTAURANT_INVENTORY FOREIGN KEY (RESTAURANT_ID) REFERENCES RESTAURANTS(RESTAURANT_ID)
);
/

-- CREATE TABLE COMMAND TO CREATE CUSTOMERS TABLE
CREATE TABLE CUSTOMERS (
    CUSTOMER_ID INT PRIMARY KEY,
    NAME VARCHAR(100),
    EMAIL VARCHAR(100) UNIQUE,
    STREET_ADDRESS VARCHAR(100),
    CITY VARCHAR(100),
    STATE VARCHAR(100),
    ZIP VARCHAR(100),
    CREDIT_CARD_NUMBER VARCHAR(100)
);
/

-- CREATE TABLE COMMAND TO CREATE ORDERS TABLE
CREATE TABLE ORDERS (
    ORDER_ID INT PRIMARY KEY,
    RESTAURANT_ID INT,
    CUSTOMER_ID INT,
    ORDER_DATE DATE,
    MENU_ITEM_ID INT,
    WAITER_ID INT,
    AMOUNT_PAID FLOAT,
    TIP FLOAT,
    FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS(CUSTOMER_ID),
    FOREIGN KEY (RESTAURANT_ID) REFERENCES RESTAURANTS(RESTAURANT_ID),
    FOREIGN KEY (MENU_ITEM_ID) REFERENCES MENUITEMS(MENU_ITEM_ID),
    FOREIGN KEY (WAITER_ID) REFERENCES WAITERS(WAITER_ID)
);
/

-- CREATE TABLE COMMAND TO CREATE REVIEWS TABLE
CREATE TABLE REVIEWS (
    REVIEW_ID INT PRIMARY KEY,
    RESTAURANT_ID INT,
    REVIEW_TEXT VARCHAR(1000),
    STARS_GIVEN INT,
    REVIEWER_EMAIL VARCHAR(255),
    CONSTRAINT FK_REVIEW_RESTAURANT FOREIGN KEY (RESTAURANT_ID) REFERENCES RESTAURANTS(RESTAURANT_ID)
);

-- CREATE FUNCTION COMMAND TO FIND CUISINE TYPE ID
-- THIS FUNCTION IS USED TO RETRIEVE CUISINE TYPE ID WHEN CUISINE NAME IS PROVIDED
-- INPUT PARAMETER - CUISINE NAME
-- OUTPUT PARAMETER - CUISINE ID
create or replace FUNCTION FIND_CUISINE_TYPE_ID(CUISINE_NAME_VALUE IN VARCHAR2) RETURN INT IS
    CUISINE_ID_VALUE INT;
BEGIN
    SELECT CUISINE_ID INTO CUISINE_ID_VALUE FROM CUISINE WHERE CUISINE_NAME=CUISINE_NAME_VALUE;
    RETURN CUISINE_ID_VALUE;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No Such cuisine Type');
        RETURN -1;
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An unexpected error occured');
        RETURN -1;
END;
/

-- CREATE FUNCTION COMMAND TO FIND RESTAURANT ID
-- THIS FUNCTION IS USED TO RETRIEVE RESTAURANT ID WHEN RESTAURENT NAME IS PROVIDED
-- INPUT PARAMETER - RESTAURANT NAME
-- OUTPUT PARAMETER - RESTAURANT ID
create or replace FUNCTION FIND_RESTAURANT_ID(R_NAME IN VARCHAR2) RETURN INT IS
    R_ID INT;
BEGIN
    SELECT RESTAURANT_ID INTO R_ID FROM RESTAURANTS WHERE RESTAURANT_NAME = R_NAME;
    RETURN R_ID;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No Such Restaurant');
        RETURN -1;
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An unexpected error occured');
        RETURN -1;
END;
/

-- CREATE FUNCTION COMMAND TO FIND WAITER ID
-- THIS FUNCTION IS USED TO RETRIEVE WAITER ID WHEN WAITER NAME IS PROVIDED
-- INPUT PARAMETER - WAITER NAME
-- OUTPUT PARAMETER - WAITER ID
create or replace FUNCTION FIND_WAITER_ID(P_WAITER_NAME IN VARCHAR2)
RETURN NUMBER IS
    V_WAITER_ID NUMBER;
BEGIN
    SELECT WAITER_ID INTO V_WAITER_ID
    FROM WAITERS
    WHERE NAME = P_WAITER_NAME
    AND ROWNUM = 1; -- ENSURES THAT ONLY ONE ID IS RETURNED IN CASE OF MULTIPLE MATCHES

    RETURN V_WAITER_ID;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('WAITER NOT FOUND.');
        RETURN NULL; -- OR HANDLE THE EXCEPTION AS REQUIRED
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
        RETURN NULL; -- OR RAISE THE EXCEPTION, DEPENDING ON HOW YOU WANT TO HANDLE IT
END;
/

-- CREATE FUNCTION COMMAND TO FIND MENU ITEM ID
-- THIS FUNCTION IS USED TO RETRIEVE MENU ITEM ID WHEN MENU ITEM NAME IS PROVIDED
-- INPUT PARAMETER - ITEM
-- OUTPUT PARAMETER - ITEM ID
create or replace FUNCTION FIND_MENU_ITEM_ID (item IN VARCHAR2) RETURN NUMBER
IS
    item_id NUMBER;
BEGIN
    SELECT MENU_ITEM_ID INTO item_id 
    FROM menuitems 
    WHERE name = item;     
    RETURN item_id;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        dbms_output.put_line('No such Menu Item');
        RETURN -1;
    WHEN OTHERS THEN 
        dbms_output.put_line('An unexpected error occurred');
        RETURN -1;
END;
/

-- CREATE FUNCTION COMMAND TO FIND CUSTOMER ID
-- THIS FUNCTION IS USED TO RETRIEVE CUSTOMER ID WHEN CUSTOMER NAME IS PROVIDED
-- INPUT PARAMETER - CUSTOMER NAME
-- OUTPUT PARAMETER - CUSTOMER ID
create or replace FUNCTION FIND_CUSTOMER_ID(C_NAME IN VARCHAR2) RETURN INT IS
    C_ID INT;
BEGIN
    SELECT CUSTOMERS_ID INTO C_ID FROM CUSTOMERS WHERE NAME = C_NAME;
    RETURN C_ID;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No such customer');
        RETURN -1;
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An unexpected error occurred');
        RETURN -1;
END;
/

--CREATE PROCEDURE TO ADD CUISINE TYPE
--THIS PROCEDURE IS USED TO INSERT VALUES INTO TABLE
-- INPUT PARAMETER - CUISINE NAME 
-- OUTPUT PARAMETER - INSERTION OF VALUES INTO CUISINE TYPE TABLE
create or replace PROCEDURE ADD_CUISINE(CUISINE_NAME_VALUE IN VARCHAR2)IS
BEGIN
    INSERT INTO CUISINE VALUES(CUISINE_ID_SEQ.NEXTVAL,CUISINE_NAME_VALUE);
    DBMS_OUTPUT.PUT_LINE('CUISINE_NAME INSERTED ' || CUISINE_NAME_VALUE);
    COMMIT;
END;
/

--CREATE PROCEDURE TO ADD RESTAURANT
-- THIS PROCEDURE IS USED TO INSERT VALUES INTO TABLE
-- INPUT PARAMETER - RESTAURENT NAME
-- OUTPUT PARAMETER - INSERTION OF VALUES INTO RESTAURENT TYPE TABLE
create or replace PROCEDURE ADD_NEW_RESTAURANT(
    R_NAME IN VARCHAR2,
    R_ADDRESS IN VARCHAR2,
    R_CITY IN VARCHAR2,
    R_STATE IN VARCHAR2,
    R_ZIP IN VARCHAR2,
    CUISINE_NAME_VALUE IN VARCHAR2
) IS
    CUISINE_ID_VALUE INT;
BEGIN
    --GET CUISINE ID
    CUISINE_ID_VALUE := FIND_CUISINE_TYPE_ID(CUISINE_NAME_VALUE);
    --INSERT NEW RESTAURANTS
    INSERT INTO RESTAURANTS VALUES(RESTAURANT_ID_SEQ.NEXTVAL,R_NAME,R_ADDRESS,R_CITY,R_STATE,R_ZIP,CUISINE_ID_VALUE);
    DBMS_OUTPUT.PUT_LINE('INSERTED VALUES ARE: ' || R_NAME ||'  '|| R_ADDRESS ||'  '||  R_CITY ||'  '|| R_STATE ||'  '|| R_ZIP ||'  '|| CUISINE_ID_VALUE);
    
    COMMIT;
END;
/

--CREATE PROCEDURE TO ADD WAITER
-- THIS PROCEDURE IS USED TO INSERT VALUES INTO TABLE
-- INPUT PARAMETER - RESTAURENT ID
-- OUTPUT PARAMETER - INSERTION OF VALUES INTO RESTAURENT TYPE TABLE
create or replace PROCEDURE ADD_WAITER(WAITERNAME IN VARCHAR2, RESTAURANTNAME IN VARCHAR2) IS
    RESTID NUMBER;
BEGIN
    -- FIND RESTAURANT ID
    RESTID := FIND_RESTAURANT_ID(RESTAURANTNAME);
    -- INSERT THE WAITER INTO THE WAITERS TABLE
    INSERT INTO WAITERS (WAITER_ID, NAME, RESTAURANT_ID) VALUES (WAITER_ID_SEQ.NEXTVAL, WAITERNAME, RESTID);
    DBMS_OUTPUT.PUT_LINE(WAITERNAME || ' ADDED SUCCESSFULLY');
    EXCEPTION WHEN OTHERS THEN
        -- ERROR HANDLING
        DBMS_OUTPUT.PUT_LINE('ERROR ADDING WAITER: ' || SQLERRM);
END;
/

--CREATE PROCEDURE TO ADD MENU ITEM
--THIS PROCEDURE IS USED TO INSERT VALUES INTO TABLE
-- INPUT PARAMETER - CUISINE TYPE
-- OUTPUT PARAMETER - INSERTION OF VALUES INTO CREATE MENU ITEM TABLE
create or replace PROCEDURE create_menu_item(
    menuname VARCHAR2, 
    price NUMBER, 
    cuisine_type VARCHAR2
) AS
    cuisineid NUMBER;
BEGIN
    cuisineid := FIND_CUISINE_TYPE_ID(cuisine_type);

    INSERT INTO menuitems (menu_item_id, name, price, cuisine_id)
    VALUES (seq_menuid.nextval, menuname, price, cuisineid);

    -- Committing the transaction to make the change permanent
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE ('SQLCODE: ' || SQLCODE); -- Outputs the SQL error code
        DBMS_OUTPUT.PUT_LINE ('SQLERRM: ' || SQLERRM); -- Outputs the error message
END;
/

--CREATE PROCEDURE TO ADD MENU ITEM TO INVENTORY
--THIS PROCEDURE IS USED TO INSERT VALUES INTO TABLE
-- INPUT PARAMETER -  MENU ITEM
-- OUTPUT PARAMETER - INSERTION OF VALUES INTO CUISINE TYPE TABLE
create or replace PROCEDURE add_item_inventory(
    menu_name VARCHAR2, 
    restaurant_name VARCHAR2,
    Quantity NUMBER 
) AS
    menu_itemid NUMBER;
    restaurantid NUMBER;
BEGIN
    restaurantid := FIND_RESTAURANT_ID (restaurant_name);
    menu_itemid :=FIND_MENU_ITEM_ID (menu_name);

    INSERT INTO RESTAURANTINVENTORY (Inventory_ID, menu_item_id, menu_item_name, restaurant_id, quantity)
    VALUES (seq_restaurantInventId.nextval,menu_itemid, menu_name,restaurantid , Quantity);

    -- Committing the transaction to make the change permanent
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE ('SQLCODE: ' || SQLCODE); 
        DBMS_OUTPUT.PUT_LINE ('SQLERRM: ' || SQLERRM); 
END;
/

--CREATE PROCEDURE TO ADD CUSTOMERS
--THIS PROCEDURE IS USED TO INSERT VALUES INTO TABLE
-- INPUT PARAMETER -  CUSTOMER NAME
-- OUTPUT PARAMETER - INSERTION OF VALUES INTO INSERT CUSTOMERS TABLE
CREATE OR REPLACE PROCEDURE INSERT_CUSTOMERS (
    CUST_NAME_IN VARCHAR,
    CUST_EMAIL_IN VARCHAR, 
    CUST_STREETADD_IN VARCHAR, 
    CUST_CITY_IN VARCHAR, 
    CUST_STATE_IN VARCHAR, 
    CUST_ZIP_IN VARCHAR, 
    CUST_CCNO_IN VARCHAR) --INPUT PARAMETERS 
AS
BEGIN
    -- INSERT QUERY WITH SEQUENCE FOR INSERT CUSTOMERS STARTING FROM 600
    INSERT INTO CUSTOMERS VALUES (
    CUST_SEQ.NEXTVAL, 
    CUST_NAME_IN, 
    CUST_EMAIL_IN, 
    CUST_STREETADD_IN, 
    CUST_CITY_IN, 
    CUST_STATE_IN, 
    CUST_ZIP_IN, 
    CUST_CCNO_IN);
    
    DBMS_OUTPUT.PUT_LINE('CUSTOMER ' || CUST_NAME_IN || ' ADDED SUCCESSFULLY');
    
EXCEPTION --EXCEPTION HANDLING
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR ADDING CUSTOMER. ERROR CODE : ' || SQLERRM);
END;
/

--CREATE PROCEDURE TO ADD ORDER
-- THIS PROCEDURE IS USED TO INSERT VALUES INTO TABLE
-- INPUT PARAMETER - RESTAURENT NAME
-- OUTPUT PARAMETER - INSERTION OF VALUES INTO ADD ORDER TABLE
create or replace PROCEDURE ADD_ORDER (
    REST_NAME VARCHAR2,
    CUST_NAME VARCHAR2,
    MENU_NAME VARCHAR2,
    WAITER_NAME VARCHAR2,
    ORD_DATE DATE,
    AMOUNT NUMBER)
AS
    CUST_ID NUMBER;
    REST_ID NUMBER;
    MENU_ID NUMBER;
    WAITER_ID NUMBER;
    TIP NUMBER;
BEGIN
    -- Find restaurant ID
    REST_ID := FIND_RESTAURANT_ID(REST_NAME);
    IF REST_ID < 0 THEN
        DBMS_OUTPUT.PUT_LINE('RESTAURANT ID NOT FOUND');
        RETURN;
    END IF;

    -- Find customer ID
    CUST_ID := FIND_CUSTOMER_ID(CUST_NAME);
    IF CUST_ID < 0 THEN
        DBMS_OUTPUT.PUT_LINE('CUSTOMER ID NOT FOUND');
        RETURN;
    END IF;

    -- Find menu item ID
    MENU_ID := FIND_MENU_ITEM_ID(MENU_NAME);
    IF MENU_ID < 0 THEN
        DBMS_OUTPUT.PUT_LINE('MENU ITEM ID NOT FOUND');
        RETURN;
    END IF;

    -- Find waiter ID
    WAITER_ID := FIND_WAITER_ID(WAITER_NAME);
    IF WAITER_ID < 0 THEN
        DBMS_OUTPUT.PUT_LINE('WAITER ID NOT FOUND');
        RETURN;
    END IF;

    -- Calculate tip
    TIP := AMOUNT * 0.2;

    -- Insert order into Orders table
    INSERT INTO ORDERS (order_id, restaurant_id, customer_id, order_date, menu_item_id, waiter_id, amount_paid, tip)
    VALUES (ORDERS_SEQ.NEXTVAL, REST_ID, CUST_ID, ORD_DATE, MENU_ID, WAITER_ID, AMOUNT, TIP);

    DBMS_OUTPUT.PUT_LINE('CUSTOMER ' || CUST_NAME || ' PLACED ORDER AT RESTAURANT ' || REST_NAME);
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        DBMS_OUTPUT.PUT_LINE('ERROR ADDING ORDER: DUPLICATE VALUE.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR ADDING ORDER: ' || SQLERRM);
END;
/

--CREATE PROCEDURE TO ADD REVIEW 
--THIS PROCEDURE IS USED TO INSERT VALUES INTO TABLE
-- INPUT PARAMETER - REVIEWER EMAIL 
-- OUTPUT PARAMETER - INSERTION OF VALUES INTO ADD REVIEW TABLE
create or replace PROCEDURE Add_Review(
    p_reviewer_email IN VARCHAR2,
    p_restaurant_name IN VARCHAR2,
    p_stars_given IN NUMBER,
    p_review_text IN VARCHAR2
)
IS
    v_review_id NUMBER;
    v_restaurant_id NUMBER;
BEGIN
    -- Find the restaurant ID using the helper function
    v_restaurant_id := get_restaurant_id(p_restaurant_name);

    IF v_restaurant_id IS NULL THEN
        DBMS_OUTPUT.PUT_LINE('Error: Restaurant not found.');
        RETURN;
    END IF;

    -- Generate review ID using sequence
    SELECT review_id_seq.nextval INTO v_review_id FROM dual;

    -- Insert review into REVIEWS table
    INSERT INTO REVIEWS (REVIEW_ID, RESTAURANT_ID, REVIEWER_EMAIL, STARS_GIVEN, REVIEW_TEXT)
    VALUES (v_review_id, v_restaurant_id, p_reviewer_email, p_stars_given, p_review_text);

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Review added successfully.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;

/

-
BEGIN

    --ADD DATA IN CUISINE TYPES TABLE
    ADD_CUISINE_TYPE('AMERICAN');
    ADD_CUISINE_TYPE('ITALIAN');
    
    --ADD DATA IN RESTAURENTS TABLE 
    ADD_RESTAURANT('RIBS_R_US', '123 MAIN ST', 'LOS ANGELES', 'CA', '21250', 'AMERICAN');
    ADD_RESTAURANT('BELLA ITALIA', '456 ELM ST', 'SAN FRANCISCO', 'CA', '21043', 'ITALIAN');
    
    --AD DATA IN WAITER TABLE
    ADD_WAITER('JACK', 'RIBS_R_US');
    ADD_WAITER('JILL', 'RIBS_R_US');
    ADD_WAITER('WENDY', 'RIBS_R_US');
    ADD_WAITER('HAILEY', 'RIBS_R_US');
    ADD_WAITER('MARY', 'BELLA ITALIA');
    ADD_WAITER('PAT', 'BELLA ITALIA');
    ADD_WAITER('MICHAEL', 'BELLA ITALIA');
    ADD_WAITER('RAKESH', 'BELLA ITALIA');
    ADD_WAITER('VERMA', 'BELLA ITALIA');
    
    --ADD DATA IN MENU ITEM TABLE
    CREATE_MENU_ITEM('AMERICAN', 'BURGER', 10);
    CREATE_MENU_ITEM('AMERICAN', 'FRIES',  5);
    CREATE_MENU_ITEM('AMERICAN', 'PASTA', 15);
    CREATE_MENU_ITEM('AMERICAN', 'SALAD', 10);
    CREATE_MENU_ITEM('AMERICAN', 'SALMON', 20);
    
    --ADD DATA IN MENU ITEM TABLE
    CREATE_MENU_ITEM('ITALIAN', 'LASAGNA', 15);
    CREATE_MENU_ITEM('ITALIAN', 'MEATBALLS', 10);
    CREATE_MENU_ITEM('ITALIAN', 'SPAGHETTI', 15);
    CREATE_MENU_ITEM('ITALIAN', 'PIZZA', 20);
    
    --ADD MENU ITEM DATA TO INVENTORY
    ADD_MENU_ITEM_TO_INVENTORY('RIBS_R_US','BURGER',50);
    ADD_MENU_ITEM_TO_INVENTORY('RIBS_R_US','FRIES',150);
    ADD_MENU_ITEM_TO_INVENTORY('BELLA ITALIA','LASAGNA',10);
    ADD_MENU_ITEM_TO_INVENTORY('BELLA ITALIA','MEATBALLS',5);
    
    --ADD DATA INTO CUSTOMERS TABLE
    INSERT_CUSTOMERS('CUST1', 'CUST1@GMAIL.COM', '401 S BEECHFIELD', 'BALTIMORE', 'MD', '21045', '1234 1234 1234 1324');
    INSERT_CUSTOMERS('CUST11', 'CUST11@GMAIL.COM', '411 S BEECHFIELD', 'BALTIMORE', 'MD', '21045', '1234 1234 1234 1324');
    INSERT_CUSTOMERS('CUST3', 'CUST3@GMAIL.COM', '403 S BEECHFIELD', 'BALTIMORE', 'MD', '21046', '1234 1234 1234 1324');
    INSERT_CUSTOMERS('CUST111', 'CUST111@GMAIL.COM', '4111 S BEECHFIELD', 'BALTIMORE', 'MD', '21045', '1234 1234 1234 1324');
    
    --ADD DATA IN ORDER TABLE
    ADD_ORDER('BELLA ITALIA', 'CUST1', 'PIZZA', 'MARY', TO_DATE('2024-03-10', 'YYYY-MM-DD'), 20);
    ADD_ORDER('BELLA ITALIA', 'CUST11', 'SPAGHETTI', 'MARY', TO_DATE('2024-03-10', 'YYYY-MM-DD'), 30);
    ADD_ORDER('BELLA ITALIA', 'CUST11', 'PIZZA', 'MARY', TO_DATE('2024-03-15', 'YYYY-MM-DD'), 20);
    
    --ADD DATA IN REVIEWS TABLE 
    ADD_REVIEW('CUST1@GMAIL.COM', 'RIBS_R_US', 4, 'Wonderful place, but expensive');
    ADD_REVIEW('CUST1@GMAIL.COM', 'BELLA ITALIA', 2, 'Verybad food. Im Italian and Bella Italia does NOT give you authentic Italian food');
    ADD_REVIEW('ABC@GMAIL.COM', 'RIBS_R_US', 4,'I liked the food. Good experience');
    ADD_REVIEW('DCE@GMAIL.COM', 'RIBS_R_US', 5, 'Excellent');
    ADD_REVIEW('ABC@GMAIL.COM', 'BELLA ITALIA', 4, 'So-So');
    
--GIVE TOP RATED RESTAURENTS AND BUYER BEWARE RESTAURENT LIST
    BUY_OR_BEWARE(1);
END;
/


